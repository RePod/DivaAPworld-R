diff --git a/Client.py b/Client.py
index 23d3d58..dfd7ade 100644
--- a/Client.py
+++ b/Client.py
@@ -199,6 +199,9 @@ class MegaMixContext(CommonContext):
                     if network_item.item == 1:
                         self.leeks_obtained += 1
                         self.check_goal()
+                    elif item_name == "SAFE":
+                        # Maybe move static items out of MegaMixCollection instead of hard coding?
+                        pass
                     else:
                         if self.modded:
                             found, song_pack = self.is_item_in_modded_data(network_item.item)
diff --git a/MegaMixCollection.py b/MegaMixCollection.py
index beeac7a..3606174 100644
--- a/MegaMixCollection.py
+++ b/MegaMixCollection.py
@@ -22,9 +22,16 @@ class MegaMixCollections:
 
     song_items: Dict[str, SongData] = {}
     song_locations: Dict[str, int] = {}
+    
+    filler_item_names: Dict[str, int] = {
+        "SAFE": 2,
+    }
+    filler_item_weights: Dict[str, int] = {
+        "SAFE": 1,
+    }
 
     def __init__(self) -> None:
-        self.item_names_to_id = ChainMap({self.LEEK_NAME: self.LEEK_CODE}, self.song_items)
+        self.item_names_to_id = ChainMap({self.LEEK_NAME: self.LEEK_CODE}, self.filler_item_names, self.song_items)
         self.location_names_to_id = ChainMap(self.song_locations)
 
         difficulty_mapping = {
diff --git a/Options.py b/Options.py
index 4e831b2..aaeccf5 100644
--- a/Options.py
+++ b/Options.py
@@ -32,6 +32,17 @@ class AdditionalSongs(Range):
     display_name = "Additional Song Count"
 
 
+class DuplicateSongPercentage(Range):
+    """
+    Percentage of duplicate songs to place in remaining filler slots.
+    Duplicate songs are considered Useful and thus out of logic.
+    """
+    range_start = 0
+    range_end = 100
+    default = 100
+    display_name = "Duplicate Song Percentage"
+
+
 class DifficultyMode(Choice):
     """Difficulty Select, All songs will be of the selected difficulty (Manual allows a range, Any gives a random difficulty for each song)
     - Any: Each song will be of a randomly chosen difficulty
@@ -212,6 +223,7 @@ class ExcludeSinger(OptionSet):
 class MegaMixOptions(PerGameCommonOptions):
     allow_megamix_dlc_songs: AllowMegaMixDLCSongs
     auto_remove_songs: AutoRemoveCleared
+    duplicate_song_percentage: DuplicateSongPercentage
     starting_song_count: StartingSongs
     additional_song_count: AdditionalSongs
     song_difficulty_mode: DifficultyMode
diff --git a/__init__.py b/__init__.py
index 53a9529..bd9592a 100644
--- a/__init__.py
+++ b/__init__.py
@@ -56,6 +56,8 @@ class MegaMixWorld(World):
 
     # Necessary Data
     mm_collection = MegaMixCollections()
+    filler_item_names = list(mm_collection.filler_item_weights.keys())
+    filler_item_weights = list(mm_collection.filler_item_weights.values())
 
     item_name_to_id = {name: code for name, code in mm_collection.item_names_to_id.items()}
     location_name_to_id = {name: code for name, code in mm_collection.location_names_to_id.items()}
@@ -175,6 +177,9 @@ class MegaMixWorld(World):
         if name == self.mm_collection.LEEK_NAME:
             return MegaMixFixedItem(name, ItemClassification.progression_skip_balancing, self.mm_collection.LEEK_CODE, self.player)
 
+        if name in self.mm_collection.filler_item_names:
+            return MegaMixFixedItem(name, ItemClassification.filler, self.mm_collection.filler_item_names.get(name), self.player)
+
         song = self.mm_collection.song_items.get(name)
         return MegaMixSongItem(name, self.player, song)
 
@@ -198,26 +203,33 @@ class MegaMixWorld(World):
         if items_left <= 0:
             return
 
-        # All remaining spots are filled with duplicate songs. Duplicates are set to useful instead of progression
-        # to cut down on the number of progression items that Mega mix puts into the pool.
+        # Fill given percentage of remaining slots as Useful/non-progression dupes.
+        dupe_count = floor(items_left * (self.options.duplicate_song_percentage / 100))
+        items_left -= dupe_count
 
         # This is for the extraordinary case of needing to fill a lot of items.
-        while items_left > len(song_keys_in_pool):
+        while dupe_count > len(song_keys_in_pool):
             for key in song_keys_in_pool:
                 item = self.create_item(key)
                 item.classification = ItemClassification.useful
                 self.multiworld.itempool.append(item)
 
-            items_left -= len(song_keys_in_pool)
+            dupe_count -= len(song_keys_in_pool)
             continue
 
-        # Otherwise add a random assortment of songs
         self.random.shuffle(song_keys_in_pool)
-        for i in range(0, items_left):
+        for i in range(0, dupe_count):
             item = self.create_item(song_keys_in_pool[i])
             item.classification = ItemClassification.useful
             self.multiworld.itempool.append(item)
 
+        filler_count = items_left
+        items_left -= filler_count
+
+        for _ in range(0, filler_count):
+            filler_item = self.create_item(self.random.choices(self.filler_item_names, self.filler_item_weights)[0])
+            self.multiworld.itempool.append(filler_item)
+
     def create_regions(self) -> None:
         menu_region = Region("Menu", self.player, self.multiworld)
         song_select_region = Region("Song Select", self.player, self.multiworld)
